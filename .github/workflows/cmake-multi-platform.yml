# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.c_compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

          # Windows (MinGW-w64 GCC; no MSVC)
          - os: windows-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++

          # macOS (Apple Clang by default)
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
    
    # ---------- Windows: set up MSYS2 + MinGW-w64 GCC ----------
    - name: Set up MSYS2 (MinGW-w64) on Windows
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-ninja
    
    - name: Clean build dir (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf build
    
    - name: Configure (Windows/MinGW; force GCC)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        which gcc
        gcc --version
        cmake -S "$PWD" -B build \
          -G Ninja \
          -DCMAKE_MAKE_PROGRAM=/mingw64/bin/ninja.exe \
          -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
          -DCMAKE_CXX_COMPILER=/mingw64/bin/g++.exe \
          -DCMAKE_BUILD_TYPE=Release
    
    - name: Build (Windows/MinGW)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: cmake --build build --config Release
  
    - name: Test (Windows/MinGW)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      working-directory: build
      run: |
        ctest --output-on-failure --build-config Release
        echo "Chosen C compiler (from cache):"
        cmake -LA -N | grep CMAKE_C_COMPILER || true
        echo "Generator (from cache):"
        cmake -LA -N | grep CMAKE_GENERATOR || true

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
